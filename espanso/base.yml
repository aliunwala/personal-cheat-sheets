# espanso match file

#############
# IMPORTANT #: If using these snippets in vscode set "editor.acceptSuggestionOnCommitCharacter": false
#############

matches:
  # Paramterized forloops
  # https://espanso.org/docs/matches/regex-triggers/
  - regex: "each(?P<array>.*);"
    replace: "for ([key, value] of Object.entries({{array}})) {\n$|$}"
  - regex: "for(?P<idx>.)(?P<array>.*);"
    replace: "for(let {{idx}} = 0; {{idx}} < {{array}}.length; {{idx}}++){\n$|$}"

  # Static if/else
  - trigger: "if;"
    replace: "if($|$){\n$|$}else{\n}"

  # Static try/catch
  - trigger: "try;"
    replace: |
      "try {
      }catch (error) {
        console.error(error)
      }finally{
      }"

  # Static logger
  - regex: "log(?P<value1>.*);"
    replace: "console.log({{value1}})"

  # arrow functions
  - trigger: "fn;"
    replace: "(elem, idx, arr)=>{return $|$}"

  # Static arrow functions
  - trigger: ".reduce;"
    replace: ".reduce((acc,curr,idx,arr)=>{return acc + curr$|$}, 0)"
  - trigger: ".sort;"
    replace: ".sort((a,b)=>{return a-b$|$})"
  - trigger: ".map;"
    replace: ".map((elem, idx, arr)=>{return $|$})"
  - trigger: ".filter;"
    replace: ".filter((elem, idx, arr)=>{return bool_trueKeep_falseRemove$|$})"
  - trigger: ".every;"
    replace: ".every((elem, idx, arr)=>{return bool_condition$|$})"
  - trigger: ".some;"
    replace: ".some((elem, idx, arr)=>{return bool_condition$|$})"
  - trigger: ".fill;"
    replace: ".fill(value, start?, end?)"
  - trigger: ".fill;"
    replace: ".fill(value, start?, end?)"
  - trigger: ".find;"
    replace: ".find((elem, idx, arr)=>{return bool_condition$|$})"
  - trigger: ".findIndex;"
    replace: ".findIndex((elem, idx, arr)=>{return bool_condition$|$})"
  - trigger: ".findLast;"
    replace: ".findLast((elem, idx, arr)=>{return bool_condition$|$})"
  - trigger: ".findLastIndex;"
    replace: ".findLastIndex((elem, idx, arr)=>{return bool_condition$|$})"
  - trigger: ".flatMap;"
    replace: ".flatMap((elem, idx, arr)=>{return bool_condition$|$})"
  - trigger: ".includes;"
    replace: ".includes(searchElement, fromIndex?)"
  - trigger: ".indexOf;"
    replace: ".indexOf(searchElement, fromIndex?)"
  - trigger: ".lastIndexOf;"
    replace: ".lastIndexOf(searchElement, fromIndex?)"
  - trigger: ".join;"
    replace: ".join(separator?)"
  # Todo Slice Splice sortAccend sortDecend sortRandom reduceMin, reduceMax, reduceSum
  # Other
  - trigger: "setTimeout;"
    replace: "setTimeout(()=>{return  }, 1000)"

  # - trigger: .sort;
  #   replace: |
  #     .sort((a,b)=>{
  #     if (a.value > b.value) {
  #       return 1;
  #     }
  #     if (a.value < b.value) {
  #       return -1;
  #     }
  #     return 0;
  #     })
